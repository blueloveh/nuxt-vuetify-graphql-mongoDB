import <%= file.name %=>sByTitle from '../graphql/query/<%= file.name %=>s.gql'
import add<%=: file.name | first | capitalize %> from '../graphql/mutation/add<%=: file.name | first | capitalize %>.gql'
import update<%=: file.name | first | capitalize %> from '../graphql/mutation/update<%=: file.name | first | capitalize %>.gql'
import delete<%=: file.name | first | capitalize %> from '../graphql/mutation/delete<%=: file.name | first | capitalize %>.gql'

const <%= file.name %> = {
  namespaced: true,
  state: {
    <%= file.name %=>s: []
  },
  getters: {
    <%= file.name %=>List(state) {
      return state.<%= file.name %=>s
    },
    <%= file.name %=>: state => id => {
      return state.<%= file.name %=>s.find(<%= file.name %=> => <%= file.name %=>._id === id)
    }
  },
  mutations: {
    <%=: file.name | capitalize %>_LIST(state, <%= file.name %=>s) {
      state.<%= file.name %=>s = <%= file.name %=>s
    },
    ADD_<%=: file.name | capitalize %>(state, <%= file.name %=>) {
      state.<%= file.name %=>s.push(<%= file.name %=>)
    },
    DELETE_<%=: file.name | capitalize %>(state, id) {
      const index = state.<%= file.name %=>s.findIndex(<%= file.name %=> => <%= file.name %=>._id === id)
      state.<%= file.name %=>s.splice(index, 1)
    },
    UPDATE_<%=: file.name | capitalize %>(state, <%= file.name %=>) {
      state.<%= file.name %=>s = [
        ...state.<%= file.name %=>s.filter(element => element._id !== <%= file.name %=>._id),
        <%= file.name %=>
      ]
    }
  },
  actions: {
    async <%= file.name %=>List(context) {
      try {
        if (this.app.apolloProvider.defaultClient) {
          const title = 'this.<%= file.name %=>'
          const <%= file.name %=>s = await this.app.apolloProvider.defaultClient.query({
            query: <%= file.name %=>sByTitle,
            variables: { title }
          })
          context.commit('<%=: file.name | capitalize %>_LIST', <%= file.name %=>s.data.<%= file.name %=>sByTitle)
        }
      } catch (error) {
        console.log(JSON.stringify(error))
        return null
      }
    },
    async add<%=: file.name | first | capitalize %>(context, { title, content }) {
      try {
        const <%= file.name %=> = await this.app.apolloProvider.defaultClient.mutate({
          mutation: add<%=: file.name | first | capitalize %>,
          variables: { title, content }
        })
        context.commit('ADD_<%=: file.name | capitalize %>', <%= file.name %=>.data.add<%=: file.name | first | capitalize %>)
      } catch (error) {
        console.log(JSON.stringify(error))
      }
    },
    async update<%=: file.name | first | capitalize %>(context, { _id, title, content }) {
      try {
        const <%= file.name %=> = await this.app.apolloProvider.defaultClient.mutate({
          mutation: update<%=: file.name | first | capitalize %>,
          variables: { _id, title, content }
        })
        context.commit('UPDATE_<%=: file.name | capitalize %>', <%= file.name %=>.data.update<%=: file.name | first | capitalize %>)
      } catch (error) {
        console.log(JSON.stringify(error))
      }
    },
    async delete<%=: file.name | first | capitalize %>(context, { id }) {
      try {
        const result = await this.app.apolloProvider.defaultClient.mutate({
          mutation: delete<%=: file.name | first | capitalize %>,
          variables: { id }
        })
        if (result.data.delete<%=: file.name | first | capitalize %>) context.commit('DELETE_<%=: file.name | capitalize %>', id)
      } catch (error) {
        console.log('error:', error)
      }
    }
  }
}

export default <%= file.name %=>
